name: Publish

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  publish:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Install Node and NPM
        uses: actions/setup-node@v3
        with:
          node-version: 22
          cache: npm

      - name: Install dependencies
        run: |
          if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            sudo apt-get update
            sudo apt-get install -y libarchive-tools
          fi
          npm install
          npm run postinstall
          npm run build
        shell: bash

      - name: Get version from package.json
        id: version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
        shell: bash

      - name: Build and Publish
        env:
          GH_TOKEN: ${{ secrets.ELECTRON_GITHUB_TOKEN }}
          VERSION: ${{ steps.version.outputs.version }}
          # macOS signing (optional)
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_ID_PASS }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          # Windows signing (optional)
          WIN_CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
          WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}
        run: |
          if [ "${{ matrix.os }}" = "macos-latest" ]; then
            if [ -n "$CSC_LINK" ] && [ -n "$APPLE_ID" ]; then
              npm exec electron-builder -- --publish always --mac
            else
              echo "No Apple certificates found, building without signing..."
              npm exec electron-builder -- --publish always --mac --config.mac.identity=null
            fi
          elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
            npm exec electron-builder -- --publish always --linux
          elif [ "${{ matrix.os }}" = "windows-latest" ]; then
            if [ -n "$WIN_CSC_LINK" ]; then
              npm exec electron-builder -- --publish always --win
            else
              echo "No Windows certificates found, building without signing..."
              npm exec electron-builder -- --publish always --win --config.win.certificateFile=null
            fi
          fi
        shell: bash

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          name: Release v${{ steps.version.outputs.version }}
          tag_name: v${{ steps.version.outputs.version }}
          files: |
            release/build/*.exe
            release/build/*.dmg
            release/build/*.deb
            release/build/*.AppImage
            release/build/*.snap
            release/build/*.zip
            release/build/*.tar.gz
            release/build/*.yml
        env:
          GITHUB_TOKEN: ${{ secrets.ELECTRON_GITHUB_TOKEN }}
